"use client";

import { useActionState, useState, useRef, useEffect } from "react"
import { FormFileUploadTestingState, TestFileUploadAction } from "./testig-action"

interface Image {
  file: File;
  previewUrl: string;
  id: string;
}

export default function FormFileUploadTesting() {
  const initialState: FormFileUploadTestingState = {status: ""};
  const [state, action] = useActionState(TestFileUploadAction, initialState);

  const fileInputRef = useRef<HTMLInputElement>(null);
  const [images, setImages] = useState<Image[]>([]);
  const [files, setFiles] = useState<File[]>([]);
  useEffect(() => {
    console.log('Updated images:', images);
    console.log('Updated files:', files);
  }, [images, files]);


  /**
   * Adds into the default <input type="file" /> all of the different images that are updated. 
   * This function allows to upload multiple images in different uploads
   * @param e The event handler for the input element
   * @returns void
  */
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files);
      const newImages: Image[] = newFiles.map((file) => {
        return {
          file: file,
          previewUrl: URL.createObjectURL(file),
          id: Math.random().toString(36).substr(2, 9),
        };
      });

      setImages((prevImages) => [...prevImages, ...newImages]);
      setFiles((prevFiles) => [...prevFiles, ...newFiles]);

      e.target.value = '';
      if (fileInputRef.current) {
        fileInputRef.current.files = rebuildFileList();
      }
    }
  };

  /**
   * 
   * @param id The id of the image that you want to delete from the stack 
   * of images
  */
  const handleRemoveImage = (id: string) => {
    const updatedImages = images.filter((image) => image.id !== id);
    const updatedFiles = files.filter((file) => !updatedImages.some((img) => img.file === file));

    setImages(updatedImages);
    setFiles(updatedFiles);

    if (fileInputRef.current) {
      fileInputRef.current.files = rebuildFileList();
    }
  };
    
  const rebuildFileList = (): FileList => {
    const dataTransfer = new DataTransfer();
    files.forEach((file: any) => dataTransfer.items.add(file));
    return dataTransfer.files;
  };

  return (
    <form action={action} name="theform" id="theform" encType="multipart/form-data">
      <input 
        ref={fileInputRef}
        onChange={handleImageChange}
        type="file" 
        id="images" 
        name="images" 
        accept="image/png, image/jpeg, image/jpg"
        multiple />
      <div>{state.status}</div>
      <div>
        {images.map((image) => (
          <div key={image.id}>
            <img key={image.id} src={image.previewUrl} alt={`preview-${image.id}`} style={{ maxWidth: '150px', margin: '10px' }} />
            <button onClick={() => {handleRemoveImage(image.id)}}>adf</button>
          </div>
        ))}
      </div>
      <button type="submit" form="theform">daje</button>
    </form>
  )
}
